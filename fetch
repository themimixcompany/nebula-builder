#!/usr/bin/env bash

set -eu
set -o pipefail

readonly SELF=$(basename "${BASH_SOURCE[0]}")
readonly OS=$(uname)
readonly VERSION=0.0.1

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=

API="https://api.github.com"
REPO=
FILE=
VER=
PARSER=

function error () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "error: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1merror: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "warning: ${@}" >&2
  else
    echo -e "\e[0;33mwarning: \e[0;0m${@}" >&2
  fi
}

function debug () {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo '**'
    echo \${@}: ${@}
    echo \$OPT_HELP: "${OPT_HELP}"
    echo \$OPT_DEBUG: "${OPT_DEBUG}"
    echo \$OPT_VERBOSE: "${OPT_VERBOSE}"
  fi
}

function parse_arguments () {
  debug parse_arguments "$@"

  local opts=$(getopt -n "${SELF}" --options hdv --longoptions help,debug,verbose -- "$@")

  if [[ $? != 0 ]]; then error "failed to parsing arguments."; fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (-h|--help) OPT_HELP=true; shift ;;
      (-d|--debug) OPT_DEBUG=true; shift ;;
      (-v|--verbose) OPT_VERBOSE=true; shift ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done
}

function process_arguments () {
  debug process_arguments "$@"

  if [[ -n "${OPT_HELP}" || "${#}" -lt 1 ]]; then
    display_usage
  else
    #return 0
    REPO="$1"
    FILE="$2"
    VER="$3"
  fi
}

function display_usage () {
  debug display_usage "$@"

  cat << EOF
USAGE:
  ${SELF} [OPTIONS]... <organization>/<repository> <file> <version>

OPTIONS:
  -h, --help           Show this help

EXAMPLE:
  TOKEN=12345 ./${SELF} themimixcompany/streams streams_unix_X64 latest
EOF
  exit 0
}

function check_token () {
  debug check_token "$@"

  if [[ -z "$TOKEN" ]]; then
    echo "TOKEN not set. Exiting."
    exit 1
  fi
}

function gh_curl () {
  debug gh_curl "$@"

  curl -H "Authorization: token $TOKEN" -H "Accept: application/vnd.github.v3.raw" $@
}

function set_parser () {
  debug set_parser "$@"

  if [[ "$VER" = "latest" ]]; then
    PARSER=".[0].assets | map(select(.name == \"$FILE\"))[0].id"
  else
    PARSER=". | map(select(.tag_name == \"$VER\"))[0].assets | map(select(.name == \"$FILE\"))[0].id"
  fi
}

function set_asset_id () {
  debug set_asset_id "$@"

  ASSET_ID=`gh_curl -s $API/repos/$REPO/releases | jq "$PARSER"`

  if [[ "$ASSET_ID" = "null" ]]; then
    echo "ERROR: version not found $VER"
    exit 1
  fi
}

function fetch_component () {
  debug fetch_components "$@"

  wget --auth-no-challenge --header='Accept:application/octet-stream' \
       https://$TOKEN:@api.github.com/repos/$REPO/releases/assets/$ASSET_ID \
       -O $FILE
}

function main () {
  debug main "$@"

  parse_arguments "$@"
  process_arguments "$@"

  check_token
  set_parser
  set_asset_id
  fetch_component
}

main "$@"
