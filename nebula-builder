#!/usr/bin/env bash

set -eu
set -o pipefail

readonly SELF=$(basename "${BASH_SOURCE[0]}")
readonly OS=$(uname)
readonly VERSION=1.0.0

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=

readonly OPT_BASE_NAME="nebula"
readonly OPT_PRODUCT_NAME="Mimix Nebula"

readonly OPT_ELECTRON=git@github.com:themimixcompany/nebula.git
readonly OPT_WORLD=git@github.com:themimixcompany/local-world.git
readonly OPT_STREAMS=git@github.com:themimixcompany/streams.git

OPT_TEMP_DIR=

OPT_STREAMS_LINUX=streams_unix_X64
OPT_STREAMS_WINDOWS=streams_windows_X64.exe
OPT_STREAMS_MACOS=streams_macos_X64

OPT_TARGETS=
OPT_BUILD_DIR=
OPT_SOURCES=
OPT_RELEASES=
OPT_TOKEN=
OPT_TAG=

function error () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "error: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1merror: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "warning: ${@}" >&2
  else
    echo -e "\e[0;33mwarning: \e[0;0m${@}" >&2
  fi
}

function debug () {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo '**'
    echo \${@}: ${@}
    echo \$OPT_DEBUG: "${OPT_DEBUG}"
  fi
}

function parse_arguments () {
  debug ${FUNCNAME[0]} "$@"

  local opts=$(getopt -n "${SELF}" --options hdvt:b:s:r:o:T: --longoptions help,debug,verbose,targets:,build-dir:,sources:,releases:,token:,tag: -- "$@")

  if [[ $? != 0 ]]; then
    error "Failed to parse arguments. Exiting."
  fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (-h|--help) OPT_HELP=true; shift ;;
      (-d|--debug) OPT_DEBUG=true; shift ;;
      (-v|--verbose) OPT_VERBOSE=true; shift ;;
      (-t|--targets) OPT_TARGETS=$2; shift 2 ;;
      (-b|--build-dir) OPT_BUILD_DIR=$2; shift 2 ;;
      (-s|--sources) OPT_SOURCES=$2; shift 2 ;;
      (-r|--releases) OPT_RELEASES=$2; shift 2 ;;
      (-o|--token) OPT_TOKEN=$2; shift 2 ;;
      (-T|--tag) OPT_TAG=$2; shift 2 ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done
}

function process_arguments () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_HELP}" || "${#}" -lt 1 ]]; then
    display_usage
  elif [[ -z "${OPT_TARGETS}" || -z "${OPT_BUILD_DIR}" ||
            -z "${OPT_SOURCES}" || -z "${OPT_RELEASES}" ||
            -z "${OPT_TAG}" ]]; then
    display_usage
  else
    return 0
  fi
}

function display_usage () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF
${SELF} [OPTIONS]... <COMMAND> [OPTIONS]...

OPTIONS:
  -h, --help       Show this help

COMMANDS:
  -t, --targets    Comma-separated list of targets (default: ${OPT_TARGETS})
  -b, --build-dir  Location for internal building (default: ${OPT_BUILD_DIR})
  -s, --sources    Location where to get the dependencies (default: ${OPT_SOURCES})
  -r, --releases   Location where to create the releases (default: ${OPT_RELEASES})
  -o, --token      The GitHub authentication token (default: none)
  -T, --tag        The name/version of a release (default: none)
EOF
  exit 0
}

function make_directory () {
  debug ${FUNCNAME[0]} "$@"

  mkdir -p "$@"
}

function ensure_directories () {
  debug ${FUNCNAME[0]} "$@"

  make_directory "${OPT_BUILD_DIR}"
  make_directory "${OPT_RELEASES}"
}

function remove () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -e "$@" ]]; then
    rm -rv "$@"
  fi
}

function move () {
  debug ${FUNCNAME[0]} "$@"

  [[ $# == 2 && -e "$1" ]] && mv "$1" "$2"
}

function fetch_remote_sources () {
  debug ${FUNCNAME[0]} "$@"

  /opt/bin/ssh-run "git clone $OPT_ELECTRON $OPT_BUILD_DIR/nebula"
  /opt/bin/ssh-run "git clone $OPT_WORLD $OPT_BUILD_DIR/nebula/app/world"
}

function fetch_local_sources () {
  debug ${FUNCNAME[0]} "$@"

  git clone ${OPT_SOURCES}/nebula ${OPT_BUILD_DIR}/nebula
  #tar -C ${OPT_SOURCES} -cf - nebula | tar -C ${OPT_BUILD_DIR} -xf -

  git clone ${OPT_SOURCES}/local-world ${OPT_BUILD_DIR}/nebula/app/world
  #tar -C ${OPT_SOURCES} -cf - local-world | tar -C ${OPT_BUILD_DIR}/nebula/app -xf -
  #mv ${OPT_BUILD_DIR}/nebula/app/local-world ${OPT_BUILD_DIR}/nebula/app/world
}

function fetch_remote_streams_sources () {
  debug ${FUNCNAME[0]} "$@"

  /opt/bin/ssh-run "git clone $OPT_STREAMS /root/common-lisp/streams"
}

function build_streams () {
  debug ${FUNCNAME[0]} "$@"

  sbcl --eval '(ql:quickload :streams)' \
       --eval '(streams:build #P"/var/lib/build/nebula/app/streams/")'
}

function create_temp_dir () {
  debug ${FUNCNAME[0]} "$@"

  OPT_TEMP_DIR=$(mktemp -d)
}

function fetch_remote_streams_binaries () {
  debug ${FUNCNAME[0]} "$@"

  local OIFS=${IFS}
  local dir=${OPT_TEMP_DIR}
  local repo=themimixcompany/streams
  local ver=latest

  IFS="," read -ra TARGETS <<< "${OPT_TARGETS}"

  cd ${dir}

  for a in ${TARGETS[@]}; do
    case ${a} in
      linux) TOKEN=${OPT_TOKEN} /opt/bin/fetch ${repo} ${OPT_STREAMS_LINUX} ${ver} ;;
      windows) TOKEN=${OPT_TOKEN} /opt/bin/fetch ${repo} ${OPT_STREAMS_WINDOWS} ${ver} ;;
      macos) TOKEN=${OPT_TOKEN} /opt/bin/fetch ${repo} ${OPT_STREAMS_MACOS} ${ver} ;;
    esac
  done

  IFS=${OIFS}
}

function fetch_local_streams_binaries () {
  debug ${FUNCNAME[0]} "$@"

  local OIFS=${IFS}
  local dir=${OPT_TEMP_DIR}

  IFS="," read -ra TARGETS <<< "${OPT_TARGETS}"

  cd ${dir}

  for a in ${TARGETS[@]}; do
    case ${a} in
      linux) cp ${OPT_RELEASES}/streams/streams_unix_X64 . ;;
      windows) cp ${OPT_RELEASES}/streams/streams_windows_X64.exe . ;;
      macos) cp ${OPT_RELEASES}/streams/streams_macos_X64 . ;;
    esac
  done

  IFS=${OIFS}
}


function fetch_dependencies () {
  debug ${FUNCNAME[0]} "$@"

  if [[ "${OPT_SOURCES}" == "github" ]]; then
    fetch_remote_sources
    fetch_remote_streams_binaries
  else
    fetch_local_sources
    fetch_local_streams_binaries
  fi
}

function package () {
  local platform=$1
  local icon=$2
  electron-packager . --platform="${platform}" --out=out --icon=assets/icons/"${icon}" --prune=true
}

function build () {
  local flag=$1
  local platform=$2
  electron-builder "${flag}" --prepackaged "out/${OPT_PRODUCT_NAME}-${platform}-x64"
}

function build_binaries () {
  debug ${FUNCNAME[0]} "$@"

  local OIFS=${IFS}
  local streams_dir=${OPT_BUILD_DIR}/nebula/app/streams

  make_directory ${streams_dir}
  cd $OPT_BUILD_DIR/nebula

  IFS="," read -ra TARGETS <<< "${OPT_TARGETS}"

  for a in ${TARGETS[@]}; do
    case ${a} in
      linux)
        npm install
        cp -v ${OPT_TEMP_DIR}/${OPT_STREAMS_LINUX} ${streams_dir}
        chmod +x ${streams_dir}/${OPT_STREAMS_LINUX}
        package linux icon.png
        build --linux linux
        remove ${streams_dir}/${OPT_STREAMS_LINUX}
        ;;
      windows)
        npm install
        cp -v ${OPT_TEMP_DIR}/${OPT_STREAMS_WINDOWS} ${streams_dir}
        chmod +x ${streams_dir}/${OPT_STREAMS_WINDOWS}
        package win32 icon.ico
        build --windows win32
        remove ${streams_dir}/${OPT_STREAMS_WINDOWS}
        ;;
      macos)
        npm install
        cp -v ${OPT_TEMP_DIR}/${OPT_STREAMS_MACOS} ${streams_dir}
        chmod +x ${streams_dir}/${OPT_STREAMS_MACOS}
        package darwin icon.icns
        ;;
      electron)
        npm install
        return 0
        ;;
      docker)
        cd ${OPT_BUILD_DIR}/${OPT_BASE_NAME}
        docker build -t ${OPT_BASE_NAME} .
        ;;
      *) warn "No targets found"; return 1 ;;
    esac
  done

  IFS=${OIFS}
}

function build_releases () {
  debug ${FUNCNAME[0]} "$@"

  local OIFS=${IFS}
  local out=${OPT_BUILD_DIR}/nebula/out

  IFS="," read -ra TARGETS <<< "${OPT_TARGETS}"

  for a in ${TARGETS[@]}; do
    case ${a} in
      linux)
        remove "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}"
        make_directory "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}"
        mv "${out}/${OPT_PRODUCT_NAME}-linux-x64" "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/app"

        make_directory "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/installers"
        move "${out}/${OPT_PRODUCT_NAME}-${OPT_TAG}.AppImage" "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/installers"
        ;;
      windows)
        remove "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}"
        make_directory "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}"
        mv "${out}/${OPT_PRODUCT_NAME}-win32-x64" "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/app"

        make_directory "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/installers"
        move "${out}/${OPT_PRODUCT_NAME} Setup ${OPT_TAG}.exe" "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/installers"
        ;;
      macos)
        return 0
        ;;
      electron)
        remove "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}"

        remove ${OPT_BUILD_DIR}/nebula/.git
        remove ${OPT_BUILD_DIR}/nebula/.gitignore
        remove ${OPT_BUILD_DIR}/nebula/out

        make_directory "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}"

        mv "${OPT_BUILD_DIR}/nebula" "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/app"

        mv "${OPT_TEMP_DIR}/streams_*" "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/app/app/streams"
        chmod +x "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/app/app/streams/streams_*"
        ;;
      docker)
        make_directory "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/app"
        docker save -o "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/app/${OPT_PRODUCT_NAME}-${OPT_TAG}.docker.tar" "${OPT_BASE_NAME}"
        gzip -vf9 "${OPT_RELEASES}/${a}/${OPT_BASE_NAME}/${OPT_TAG}/app/${OPT_PRODUCT_NAME}-${OPT_TAG}.docker.tar"
        ;;
      *) warn "No targets found"; return 1;;
    esac
  done

  IFS=${OIFS}
}

function main () {
  debug ${FUNCNAME[0]} "$@"

  parse_arguments "$@"
  process_arguments "$@"

  ensure_directories
  create_temp_dir
  fetch_dependencies
  build_binaries
  build_releases
}

main "$@"
