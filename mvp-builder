#!/usr/bin/env bash

set -eu
set -o pipefail

readonly SELF=$(basename "${BASH_SOURCE[0]}")
readonly OS=$(uname)
readonly VERSION=0.0.3

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=

OPT_ELECTRON=git@github.com:themimixcompany/mvp-electron.git
OPT_VIEWER=git@github.com:themimixcompany/mpv-shell.git
OPT_ENGINE=git@github.com:themimixcompany/engine.git

OPT_ARCH="linux"
OPT_BUILD_DIR="./build"
OPT_RELEASES_DIR="./releases"

OPT_BASE_NAME="mvp"

error () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "error: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1merror: \e[0;0m${@}" >&2
  fi

  exit 1
}

warn () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "warning: ${@}" >&2
  else
    echo -e "\e[0;33mwarning: \e[0;0m${@}" >&2
  fi
}

debug () {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo '**'
    echo \${@}: ${@}
    echo \$OPT_HELP: "${OPT_HELP}"
    echo \$OPT_DEBUG: "${OPT_DEBUG}"
    echo \$OPT_VERBOSE: "${OPT_VERBOSE}"
  fi
}

parse_arguments () {
  debug parse_arguments "$@"

  local opts=$(getopt -n "${SELF}" --options hdva:b: --longoptions help,debug,verbose,arch:,build-dir:,releases-dir: -- "$@")

  if [[ $? != 0 ]]; then error "failed to parsing arguments."; fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (-h|--help) OPT_HELP=true; shift ;;
      (-d|--debug) OPT_DEBUG=true; shift ;;
      (-v|--verbose) OPT_VERBOSE=true; shift ;;
      (-a|--arch) OPT_ARCH=$2; shift 2 ;;
      (-b|--build-dir) OPT_BUILD_DIR=$2; shift 2 ;;
      (-r|--releases-dir) OPT_RELEASES_DIR=$2; shift 2 ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done
}

process_arguments () {
  debug process_arguments "$@"

  if [[ -n "${OPT_HELP}" || "${#}" -lt 1 ]]; then
    display_usage
  else
    return 0
  fi
}

display_usage () {
  debug display_usage "$@"

  cat << EOF
${SELF} [OPTIONS]... <COMMAND> [OPTIONS]...

OPTIONS:
  -h, --help           Show this help

COMMANDS:
  -a, --arch               Specify the target architecure (default: ${OPT_ARCH})
  -b, --build-dir          Specify the build dir (default: ${OPT_BUILD_DIR})
  -r, --releases-dir       Specify the releases directory (default: ${OPT_RELEASES_DIR})
EOF
  exit 0
}

ensure_directories () {
  debug ensure_directories "$@"

  mkdir -p "$OPT_BUILD_DIR"
}

fetch_electron_sources () {
  debug fetch_electron_sources "$@"

  ssh-run "git clone $OPT_ELECTRON $OPT_BUILD_DIR/mvp-electron"
}

fetch_viewer_sources () {
  debug fetch_viewer_sources "$@"

  ssh-run "git clone $OPT_VIEWER $OPT_BUILD_DIR/mvp-electron/app/viewer"
}

fetch_engine_sources () {
  debug fetch_engine_sources "$@"

  ssh-run "git clone $OPT_ENGINE /root/common-lisp/engine"
}

build_engine () {
  debug build_engine "$@"

  sbcl --eval '(ql:quickload :engine)' \
       --eval '(engine:build #P"/var/lib/build/mvp-electron/app/engine/")'
}

fetch_engine_binaries () {
  debug fetch_engine_binaries "$@"
}

fetch_dependencies () {
  debug fetch_dependencies "$@"

  fetch_electron_sources
  fetch_viewer_sources

  fetch_engine_sources
  build_engine

  #fetch_engine_binaries
}

build_binaries () {
  debug build_binaries "$@"

  cd $OPT_BUILD_DIR/mvp-electron
  npm install
  electron-forge package --platform=${OPT_ARCH}
}

create_releases () {
  debug create_releases "$@"

  cd ${OPT_BUILD_DIR}/mvp-electron
  cp -a out/${OPT_BASE_NAME}-${OPT_ARCH}-x64 ${OPT_RELEASES_DIR}/${OPT_ARCH}
}

main () {
  debug main "$@"

  parse_arguments "$@"
  process_arguments "$@"

  ensure_directories
  fetch_dependencies
  build_binaries
  create_releases
}

main "$@"
